{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\nimport RoomForm from \"./RoomForm\";\nimport ChatSection from \"./ChatSection\";\nimport { SOCKET_EVENTS } from \"../../utils/Constants\";\nimport Message from \"../../utils/Message\";\nexport var UserContext = React.createContext(null);\n\nvar ChatHome = function ChatHome() {\n  _s();\n\n  var _useState = useState(null),\n      socket = _useState[0],\n      setSocket = _useState[1];\n\n  var _useState2 = useState(null),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  var _useState3 = useState([]),\n      roomUsers = _useState3[0],\n      setRoomUsers = _useState3[1];\n\n  var _useState4 = useState([]),\n      messages = _useState4[0],\n      setMessages = _useState4[1]; // Initializing Socket\n\n\n  useEffect(function () {\n    if (!socket) {\n      initSocket();\n    }\n  }, [socket]);\n  /**\r\n   * Initializing socket\r\n   * Handling socket events\r\n   */\n\n  var initSocket = function initSocket() {\n    var socket = io();\n    var CHAT_MESSAGE = SOCKET_EVENTS.CHAT_MESSAGE,\n        ROOM_USERS = SOCKET_EVENTS.ROOM_USERS; // listens for incoming message from server\n    // 1. chat messages\n\n    socket.on(CHAT_MESSAGE, function (message) {\n      setMessages(function (messages) {\n        return [].concat(_toConsumableArray(messages), [message]);\n      });\n    }); // 2. set room users\n\n    socket.on(ROOM_USERS, function (info) {\n      setRoomUsers(info.users);\n    });\n    socket.on(\"disconnect\", function () {\n      console.log(\"Disconnected\");\n    });\n    setSocket(socket);\n  };\n  /**\r\n   * On join from chat form\r\n   * @param  {username:string, room:string} user\r\n   */\n\n\n  var onJoin = function onJoin(user) {\n    setUser(user);\n    var username = user.username,\n        room = user.room,\n        key = user.key; // join room\n\n    socket.emit(SOCKET_EVENTS.JOIN_ROOM, {\n      username: username,\n      room: room\n    });\n  };\n  /**\r\n   * On user have left the room\r\n   */\n\n\n  var onLeave = function onLeave() {\n    setUser(null);\n    setMessages([]);\n    setSocket(null);\n    socket.disconnect();\n  };\n  /**\r\n   * Handles message sending by sending message to server\r\n   * @param  {Message} Instance of class message\r\n   */\n\n\n  var sendMessage = function sendMessage(message) {\n    // emit message to server\n    var encrypted_message = \"CryptoJS.AES.encrypt(message, 'user.key')\";\n    console.log(message + \" -> \" + encrypted_message);\n    socket.emit(SOCKET_EVENTS.CHAT_MESSAGE, message);\n  };\n\n  return __jsx(\"section\", {\n    style: {\n      height: \"100vh\"\n    }\n  }, !user ? __jsx(RoomForm, {\n    handleSubmit: onJoin\n  }) : __jsx(UserContext.Provider, {\n    value: user\n  }, __jsx(ChatSection, {\n    onSend: sendMessage,\n    roomUsers: roomUsers,\n    messages: messages,\n    onLeave: onLeave\n  })));\n};\n\n_s(ChatHome, \"ObLF6CdTEJBCNgy0JzTmcGdHasw=\");\n\n_c = ChatHome;\nexport default ChatHome;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatHome\");","map":{"version":3,"names":["useState","useEffect","io","RoomForm","ChatSection","SOCKET_EVENTS","Message","UserContext","React","createContext","ChatHome","socket","setSocket","user","setUser","roomUsers","setRoomUsers","messages","setMessages","initSocket","CHAT_MESSAGE","ROOM_USERS","on","message","info","users","console","log","onJoin","username","room","key","emit","JOIN_ROOM","onLeave","disconnect","sendMessage","encrypted_message","height"],"sources":["C:/Users/teldeeb/kitchen/Anomly/components/Chat/ChatHome.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport io from \"socket.io-client\";\r\n\r\nimport RoomForm from \"./RoomForm\";\r\nimport ChatSection from \"./ChatSection\";\r\nimport { SOCKET_EVENTS } from \"../../utils/Constants\";\r\nimport Message from \"../../utils/Message\";\r\n\r\nexport const UserContext = React.createContext(null);\r\n\r\nconst ChatHome = () => {\r\n    const [socket, setSocket] = useState(null);\r\n    const [user, setUser] = useState(null);\r\n    const [roomUsers, setRoomUsers] = useState([]);\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    // Initializing Socket\r\n    useEffect(() => {\r\n        if (!socket) {\r\n            initSocket();\r\n        }\r\n    }, [socket]);\r\n\r\n    /**\r\n     * Initializing socket\r\n     * Handling socket events\r\n     */\r\n    const initSocket = () => {\r\n        var socket = io();\r\n\r\n        const { CHAT_MESSAGE, ROOM_USERS } = SOCKET_EVENTS;\r\n\r\n        // listens for incoming message from server\r\n        // 1. chat messages\r\n        socket.on(CHAT_MESSAGE, (message) => {\r\n            setMessages((messages) => [...messages, message]);\r\n        });\r\n        // 2. set room users\r\n        socket.on(ROOM_USERS, (info) => {\r\n            setRoomUsers(info.users);\r\n        });\r\n\r\n        socket.on(\"disconnect\", () => {\r\n            console.log(\"Disconnected\");\r\n        });\r\n\r\n        setSocket(socket);\r\n    };\r\n\r\n    /**\r\n     * On join from chat form\r\n     * @param  {username:string, room:string} user\r\n     */\r\n    const onJoin = (user) => {\r\n        setUser(user);\r\n\r\n        const { username, room, key } = user;\r\n\r\n        // join room\r\n        socket.emit(SOCKET_EVENTS.JOIN_ROOM, { username, room });\r\n    };\r\n\r\n    /**\r\n     * On user have left the room\r\n     */\r\n    const onLeave = () => {\r\n        setUser(null);\r\n        setMessages([]);\r\n        setSocket(null);\r\n        socket.disconnect();\r\n    };\r\n\r\n    /**\r\n     * Handles message sending by sending message to server\r\n     * @param  {Message} Instance of class message\r\n     */\r\n    const sendMessage = (message) => {\r\n        // emit message to server\r\n        var encrypted_message = \"CryptoJS.AES.encrypt(message, 'user.key')\";\r\n        console.log(message + \" -> \" + encrypted_message);\r\n        socket.emit(SOCKET_EVENTS.CHAT_MESSAGE, message);\r\n    };\r\n\r\n    return (\r\n        <section style={{ height: \"100vh\" }}>\r\n            {!user ? (\r\n                <RoomForm handleSubmit={onJoin} />\r\n            ) : (\r\n                <UserContext.Provider value={user}>\r\n                    <ChatSection\r\n                        onSend={sendMessage}\r\n                        roomUsers={roomUsers}\r\n                        messages={messages}\r\n                        onLeave={onLeave}\r\n                    />\r\n                </UserContext.Provider>\r\n            )}\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default ChatHome;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}